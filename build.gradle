buildscript {
	ext {
		springBootVersion = '1.5.7.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.moowork.gradle:gradle-node-plugin:1.2.0")
		classpath("gradle.plugin.com.boxfuse.client:flyway-release:4.2.0")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.moowork.node'
apply plugin: 'org.flywaydb.flyway'

group = 'com.lunchmaster'
version = '0.1.2'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
	compile('org.hibernate:hibernate-core')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.security.oauth:spring-security-oauth2')
	//compile('org.springframework.session:spring-session')

	compile('mysql:mysql-connector-java')
	//runtime('com.h2database:h2')

	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

	test.enabled = false
	testCompile('org.springframework.boot:spring-boot-starter-test')
	//testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
	//testCompile('org.springframework.security:spring-security-test')
}

node {
	version = '6.11.5'
	npmVersion = '5.5.1'
	download = true
	workDir = file("${project.buildDir}/nodejs")
	npmWorkDir = file("${project.projectDir}/front")
	nodeModulesDir = file("${project.projectDir}/front")
}

flyway {
	url = 'jdbc:mysql://localhost:3306/lunchmaster_flyway'
	user = 'root'
	password = 'root'
	schemas = ['lunchmaster_flyway']
}

task buildFrontend(type: NpmTask){
	group 'build'
	args = ['run', 'build-jar']
}

task cleanFrontend(type: Delete){
	delete "${projectDir}/front/dist", "${projectDir}/src/main/resources/static"
}

task copyWebcontent(type: Copy){
	group "build"
	from "${projectDir}/front/dist"
	into "${projectDir}/src/main/resources/static"
	include '*', '*/*', '*/**'
	dependsOn buildFrontend
	outputs.upToDateWhen {false}
}

task runJar(type: Exec){
	group 'application'
	workingDir "${project.buildDir}/libs"
	executable 'java'
	args = ['-jar', "lunchmaster-${project.version}.jar"]
}

compileJava.dependsOn copyWebcontent
clean.dependsOn cleanFrontend
buildFrontend.dependsOn npmInstall